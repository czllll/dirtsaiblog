---
import formatDateWithSuffix from "@/utils/formatDate"


import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import "../../styles/globals.css";
import ProfileCard from "@/components/ProfileCard.astro";
import SideContent from "@/components/SideContent.astro";
import { getTagUrl} from "@/components/PostCard.astro";
import { getReadingTime } from '../../utils/readingTime';
import { CalendarDays, Clock2 } from "lucide-react";

export const getStaticPaths = async () => {
    const posts = await getCollection("posts");
    const paths = posts.map((post: { slug: any }) => {
        return {
            params: {
                slug: post.slug,
            },
            props: {
                post,
            },
        };
    });
    return paths;
};

type Props = {
    post: CollectionEntry<"posts">;
};

const { post } = Astro.props;

const { Content } = await post.render();

const readingTimeStats = getReadingTime(post.body);

---

<Layout title={post.data.title} data-pagefind-body>

    <div class="flex flex-col max-w-7xl mt-8 lg:flex-row pt-20 px-2 w-[85vw] mx-auto min-w-[320px]">
        <div class="w-full lg:w-4/5 p-4 pr-10 mb-6 transition-all duration-300 ease-linear">
            <div class="flex w-full min-h-[100px]">
                <div class="pb-6 text-foreground">
                    <h1 class="text-2xl font-bold mb-4">{post.data.title}</h1>
                    <div class="flex items-center space-x-4 text-sm">
                        <div class="flex">
                            <div class="">
                                <CalendarDays />
                            </div>
                            <div class="p-1">
                                {formatDateWithSuffix(post.data.date)}
                            </div>
                          </div>
                          <div class="flex">
                            <Clock2 />
                            <div class="p-1">
                                <span>{Math.ceil(readingTimeStats.minutes)} mins read</span>
                            </div>
                          </div>                        
                          
                        <span>
                                {
                                    post.data.tags.map((tag, index) => (
                                        <>
                                            <a
                                                href={getTagUrl(tag)}
                                                class="inline-block px-2 py-0 text-sm rounded-md border border-gray-600 text-gray-600 hover:border-yellow-700 hover:text-yellow-700 transition-colors duration-200"
                                            >
                                                {tag}
                                            </a>
                                            {index < post.data.tags.length - 1
                                                ? " "
                                                : ""}
                                        </>
                                    ))
                                }
                            </span>
                    </div>
                </div>
        
            </div>
            <div>
                <div class="border-b border-gray-300 mb-6"></div>
                <div class="prose prose-lg dark:prose-invert mx-auto max-w-none mb-30 prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg">
                    <Content />
                </div>
                <div class="border-b border-gray-300 mt-6"></div>

            </div>

        </div>

        <div class="w-full lg:w-1/5  transition-all duration-300 ease-linear">
                <ProfileCard />
            <div id="sticky-wrapper" class="transition-[top] duration-300 ease-linear sticky top-[var(--sticky-top,0px)] pt-11">
                <SideContent post={post}/>
            </div>
        </div>
    </div>
</Layout>

